// Bindings generated by `windows-bindgen` 0.61.0

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

pub type PCSTR = *const u8;
pub type PWSTR = *mut u16;
pub mod Windows {
    pub mod Win32 {
        pub mod Foundation {
            #[repr(C)]
            #[derive(Clone, Copy, Default)]
            pub struct SYSTEMTIME {
                pub wYear: u16,
                pub wMonth: u16,
                pub wDayOfWeek: u16,
                pub wDay: u16,
                pub wHour: u16,
                pub wMinute: u16,
                pub wSecond: u16,
                pub wMilliseconds: u16,
            }
        }
        pub mod Globalization {
            windows_targets::link!("kernel32.dll" "system" fn GetUserDefaultGeoName(geoname : super::super::super::PWSTR, geonamecount : i32) -> i32);
            windows_targets::link!("icuin.dll" "cdecl" fn ucal_getTimeZoneIDForWindowsID(winid : *const u16, len : i32, region : super::super::super::PCSTR, id : *mut u16, idcapacity : i32, status : *mut UErrorCode) -> i32);
            pub type UErrorCode = i32;
        }
        pub mod System {
            pub mod SystemServices {
                pub const TIME_ZONE_ID_DAYLIGHT: u32 = 2u32;
                pub const TIME_ZONE_ID_STANDARD: u32 = 1u32;
                pub const TIME_ZONE_ID_UNKNOWN: u32 = 0u32;
            }
            pub mod Time {
                windows_targets::link!("kernel32.dll" "system" fn GetDynamicTimeZoneInformation(ptimezoneinformation : *mut DYNAMIC_TIME_ZONE_INFORMATION) -> u32);
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct DYNAMIC_TIME_ZONE_INFORMATION {
                    pub Bias: i32,
                    pub StandardName: [u16; 32],
                    pub StandardDate: super::super::Foundation::SYSTEMTIME,
                    pub StandardBias: i32,
                    pub DaylightName: [u16; 32],
                    pub DaylightDate: super::super::Foundation::SYSTEMTIME,
                    pub DaylightBias: i32,
                    pub TimeZoneKeyName: [u16; 128],
                    pub DynamicDaylightTimeDisabled: bool,
                }
                impl Default for DYNAMIC_TIME_ZONE_INFORMATION {
                    fn default() -> Self {
                        unsafe { core::mem::zeroed() }
                    }
                }
                pub const TIME_ZONE_ID_INVALID: u32 = 4294967295u32;
            }
        }
    }
}
